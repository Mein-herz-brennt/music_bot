from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from States_music_bot import States
import json

bot = Bot(token="5214806664:AAGPEY-Vkq6qmnV04P3AJjwEwetT59M4YWM", parse_mode='html')
dp = Dispatcher(bot, storage=MemoryStorage())

"""defs"""

info = {"users": []}


# with open("users.json", "w") as file:
#     json.dump(info, file, indent=3)

# inf = {"nickname": "",
#        "user_id": "",
#        "number_of_posts":"",
#        "subscribers": []}


def reader():
    with open("users.json", "r") as file:
        inf = json.load(file)
    return inf


def adder(inf):
    with open("users.json", "w") as file:
        json.dump(inf, file, indent=3)


def change_nickname(user_id: int, new_nick: str):
    inf = reader()
    for i in inf["users"]:
        if i["user_id"] == user_id:
            i["nickname"] = new_nick
            break
    adder(inf)


def unsubscribe(first_user_id, second_user_id):
    inf = reader()
    for i in range(len(inf["users"])):
        if inf["users"][i]["user_id"] == first_user_id:
            for j in inf["users"][i]["subscribed"]:
                if j == second_user_id:
                    inf["users"][i]["subscribed"].remove(second_user_id)
                    break
    for i in range(len(inf["users"])):
        if inf["users"][i]["user_id"] == second_user_id:
            for j in inf["users"][i]["subscribers"]:
                if j == first_user_id:
                    inf["users"][i]["subscribers"].remove(first_user_id)
                    break
    adder(inf)


def get_info_about_user(user_id):
    inf = reader()["users"]
    for i in inf:
        if i["user_id"] == user_id:
            return i


def get_info_about_user_by_name(nickname):
    inf = reader()["users"]
    for i in inf:
        if i["nickname"] == nickname:
            return i


def subscribed(nickname: str, user_id: int):
    inf = reader()
    a = 0
    for i in inf["users"]:
        if i["nickname"] == nickname:
            a = i["user_id"]
            break
    for i in range(len(inf["users"])):
        if inf["users"][i]["user_id"] == user_id:
            inf["users"][i]["subscribed"].append(a)
            break
    adder(inf)


def subscribe(nickname: str, user_id: int):
    inf = reader()
    for i in inf["users"]:
        if i["nickname"] == nickname:
            i["subscribers"].append(user_id)
    adder(inf)


def num_of_posts(user_id: int):
    inf = reader()
    for i in inf["users"]:
        if i["user_id"] == user_id:
            i["number_of_posts"] += 1
    adder(inf)


def popular():
    inf = reader()["users"]
    sort = {}
    list_of = []
    for i in range(len(inf)):
        list_of.append(len(inf[i]["subscribers"]))
        sort["{}".format(len(inf[i]["subscribers"]))] = i

    list_of = max(list_of)
    user_names = inf[int(sort[str(list_of)])]["nickname"]
    user_id = inf[int(sort[str(list_of)])]["user_id"]
    return user_names, user_id


def rewrite_file(text):
    with open("usernames.txt", "w") as file:
        file.writelines(text)
    return 1


def write_in_file(nickname: str):
    with open("usernames.txt", "a") as file:
        file.write(nickname + "\n")
    return 1


def read_file():
    with open("usernames.txt", "r") as file:
        text = file.read()
    return text


def check_registration(user_id):
    inf = reader()["users"]
    for i in inf:
        if user_id == i["user_id"]:
            return True


def add_id_to_file(user_id):
    with open("user_ids.txt", "a") as file:
        file.write(str(user_id) + "\n")


"""keyboards"""
registration_inline_keyboard = types.InlineKeyboardMarkup()
button_registration = types.InlineKeyboardButton(text="–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å", callback_data="registration")
registration_inline_keyboard.add(button_registration)

user_ac_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
button1_ac = types.KeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å üéµ–º—É–∑–∏–∫–æ—éüéµ")
button2_ac = types.KeyboardButton(text="–ü–æ—à—É–∫ –¥—Ä—É–∑—ñ–≤")
button3_ac = types.KeyboardButton(text="üë§–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—åüë§")
user_ac_keyboard.add(button3_ac).add(button1_ac).add(button2_ac)

user_settings_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
button1_s = types.KeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è üë§–ø—Ä–æ—Ñ—ñ–ª—éüë§")
button3_s = types.KeyboardButton(text="–ú–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏")
# button4_s = types.KeyboardButton(text="–î–æ–ø–æ–º–æ–≥–∞ –ó–°–£")
back_button = types.KeyboardButton(text="üîô–ù–∞–∑–∞–¥üîô")
user_settings_keyboard.add(button1_s).add(button3_s).add(back_button)

back_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
back_button1 = types.KeyboardButton(text="üîô–ù–∞–∑–∞–¥üîô")
back_keyboard.add(back_button1)

unsub_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
back_button2 = types.KeyboardButton(text="üîô–ù–∞–∑–∞–¥üîô")
unsub_button = types.KeyboardButton(text="–°–∫–∞—Å—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –∞–≤—Ç–æ—Ä–∞")
unsub_keyboard.add(unsub_button).add(back_button2)

"""admin keyboard"""
admin_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
button_admin1 = types.KeyboardButton(text="–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º")
button_admin2 = types.KeyboardButton(text="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–æ—Ç–∞")
admin_keyboard.add(button_admin1).add(button_admin2)

"""command handlers"""


@dp.message_handler(commands="start")
async def start_command(message: types.Message):
    _id = message.from_user.id
    # print(message.from_user.id)
    if check_registration(_id):
        await message.answer("–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ", reply_markup=user_ac_keyboard)
    else:
        add_id_to_file(_id)
        await message.answer("–ü—Ä–∏–≤—ñ—Ç üëãüèª,\n"
                             "—è –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π üá∫üá¶—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—éüá∫üá¶\n"
                             "–∫–æ–º–∞–Ω–¥–æ—é —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤,\n"
                             "—â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ –≤ –æ–±–º—ñ–Ω—ñ —É–ª—é–±–ª–µ–Ω–æ—é üéµ–º—É–∑–∏–∫–æ—éüéµ,\n"
                             "—Ç–∞ üìù–¥–æ–ø–∏—Å–∞–º–∏üìù –¥–æ –Ω–µ—ó.\n",
                             reply_markup=registration_inline_keyboard)


@dp.message_handler(commands="admin")
async def admin_command(message: types.Message):
    _id = message.from_user.id
    if str(_id) == "789402487":
        await message.answer("–í—ñ—Ç–∞—î–º–æ –†–æ–∑—Ä–æ–±–Ω–∏–∫", reply_markup=admin_keyboard)
    else:
        await message.answer("–í–∏–±–∞—á—Ç–µ —Ç–∞ –≤–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä", reply_markup=user_ac_keyboard)


@dp.message_handler(commands="help")
async def help_command(message: types.Message):
    await message.answer("–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —â–æ–± –ø—Ä–∏–Ω–æ—Å–∏—Ç–∏ –≤–∞–º —Ä–∞–¥—ñ—Ç—å üôÉ\n"
                         "—Ç–∞ –¥—ñ–ª–∏—Ç–∏—Å—è üéµ–º—É–∑–∏–∫–æ—éüéµ –æ–¥—Ä–∞–∑—É –∑ –≤–µ–ª–∏–∫–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ª—é–¥–µ–π.\n"
                         "–ú–µ–Ω—é —ñ–Ω—Ç—É—ó—Ç–∏–≤–Ω–æ –∑—Ä–æ–∑—É–º—ñ–ª–µ —Ç–∞ –ø—Ä–æ—Å—Ç–µ,\n"
                         "—â–æ–± –Ω–∏–º –∑–º–æ–≥–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å—ñ.\n"
                         "–∫–æ–º'—é–Ω—ñ—Ç—ñ: @Vo1doni —Ç–∞ @me_gusta_itto\n"
                         "–ú–∏ –≤–≤–∞–∂–∞—î–º–æ —â–æ —Ä–µ–∫–ª–∞–º—ñ –≤ –Ω–∞—à–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—ñ –ø–æ–∫–∏ –Ω–µ –º—ñ—Å—Ü–µ,\n"
                         "–∞ —è–∫—â–æ –ø–ª–∞–Ω—É–≤–∞—Ç–∏–º–µ–º–æ —ó—ó –≤–º–∏–∫–∞—Ç–∏ —Ç–æ –≤—Å—ñ—Ö –ø—Ä–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–∏–º–æ!\n")


"""registration"""


@dp.callback_query_handler(text="registration")
async def user_registration(call: types.CallbackQuery):
    await call.message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è —Ü—ñ—î—ó –º–µ—Ä–µ–∂—ñüòÖ")
    await States.registration.set()


@dp.message_handler(state=States.registration)
async def ok_or_not(message: types.Message, state: FSMContext):
    _id = message.from_user.id
    await state.finish()
    if message.text not in " /.,<>?@#$%^&*()!‚Ññ;:‚Ç¥~'" and len(message.text) < 24:
        if message.text + "\n" in read_file():
            await message.answer("–í–∏–±–∞—á—Ç–µ —Ç–∞ —Ü–µ —ñ–º'—è –ø—Ä–æ—Ñ—ñ–ª—é –≤–∂–µ –∑–∞–π–Ω—è—Ç–æ!üôÉ\n"
                                 "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–µ —ñ–º'—è –ø—Ä–æ—Ñ—ñ–ª—é!")
            await States.registration.set()
        else:
            write_in_file(message.text)
            inf = reader()
            inf["users"].append({"nickname": message.text,
                                 "user_id": _id,
                                 "number_of_posts": 0,
                                 "subscribed": [],
                                 "subscribers": []})
            adder(inf)
            await message.answer("–í—ñ—Ç–∞—î–º–æ!üéâ‚ú®\n"
                                 "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!\n"
                                 "–ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—å –Ω–∞ –¥—Ä—É–∑—ñ–≤,\n"
                                 "–¥—ñ–ª—ñ—Ç—å—Å—è üéµ–º—É–∑–∏–∫–æ—éüéµ —è–∫–∞ —Ü—ñ–∫–∞–≤–∞ —Å–∞–º–µ –≤–∞–º,\n"
                                 "—Ç–∞ –≥–æ–ª–æ–≤–Ω–µ - –∫–∞–π—Ñ—É–π—Ç–µ!üòÑ\n", reply_markup=user_ac_keyboard)
    else:
        await message.answer("–í–∏–±–∞—á—Ç–µ —Ç–∞ –≤–∞—à –Ω—ñ–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —Ü–∏–º —Å–∏–º–≤–æ–ª–æ–ºüòî\n"
                             "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–µ —ñ–º'—è –ø—Ä–æ—Ñ—ñ–ª—é!")
        await States.registration.set()


"""work with audio"""


@dp.message_handler(content_types="audio")
async def music(message: types.Message):
    _id = message.from_user.id
    inf = get_info_about_user(_id)
    num_of_posts(_id)
    for i in inf["subscribers"]:
        await bot.send_message(chat_id=i, text="–ü—ñ—Å–Ω—è –≤—ñ–¥  <code>{}</code>".format(inf["nickname"]), parse_mode="html")
        await message.forward(i)
    await message.answer("üéµ–ü—ñ—Å–Ω—èüéµ —Ä–æ–∑—ñ—Å–ª–∞–Ω–∞!")


"""admin handlers"""


@dp.message_handler(text="–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º")
async def message_for_all(message: types.Message):
    _id = message.from_user.id
    if str(_id) == "789402487":
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫–µ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑—ñ—Å–ª–∞—Ç–∏ –≤—Å—ñ–º")
        await States.msg_for_all.set()
    else:
        await message.answer("–í–∏–±–∞—á—Ç–µ —Ç–∞ –≤–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä", reply_markup=user_ac_keyboard)


@dp.message_handler(state=States.msg_for_all)
async def send_msg_all(message: types.Message, state: FSMContext):
    await state.finish()
    _id = message.from_user.id
    if str(_id) == "789402487":
        with open("user_ids.txt", "r") as file:
            text = file.readlines()
            for i in range(len(text)):
                text[i] = text[i].replace("/n", "")
                await bot.send_message(chat_id=text[i], text=f"{message.text}", parse_mode="html")
            await message.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–æ–∑—ñ—Å–ª–∞–Ω–æ!", reply_markup=admin_keyboard)
    else:
        await message.answer("–í–∏–±–∞—á—Ç–µ —Ç–∞ –≤–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä", reply_markup=user_ac_keyboard)


@dp.message_handler(text="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–æ—Ç–∞")
async def message_for_all(message: types.Message):
    _id = message.from_user.id
    if str(_id) == "789402487":
        with open("usernames.txt", "r") as file:
            text = file.readlines()
            len_of_text = len(text)
        await message.answer(f"–ù–∞ –¥–∞–Ω–Ω–∏–π –º–æ–º–µ–Ω—Ç —É –±–æ—Ç—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ {len_of_text} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
    else:
        await message.answer("–í–∏–±–∞—á—Ç–µ —Ç–∞ –≤–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä", reply_markup=user_ac_keyboard)


"""user handlers"""


@dp.message_handler(text="üë§–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—åüë§")
async def my_profile(message: types.Message):
    _id = message.from_user.id
    inf = get_info_about_user(_id)
    mention = inf["nickname"]
    number_of_subscribers = len(inf["subscribers"])
    number_of_subscribed = len(inf["subscribed"])
    number_of_posts = inf["number_of_posts"]
    await message.answer(f"–í–∞—à –Ω—ñ–∫–Ω–µ–π–º: <code>{mention}</code>\n"
                         f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤: {number_of_subscribers}\n"
                         f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–æ–∫: {number_of_subscribed}\n"
                         f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—É–∑–∏—á–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤: {number_of_posts}\n", parse_mode="html",
                         reply_markup=user_settings_keyboard)


@dp.message_handler(text="–ü–æ—à—É–∫ –¥—Ä—É–∑—ñ–≤")
async def find_friends(message: types.Message):
    nickname, _ids = popular()
    inf1 = len(get_info_about_user(_ids)["subscribers"])
    posts = get_info_about_user(_ids)["number_of_posts"]
    await message.answer(f"–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π –∞–≤—Ç–æ—Ä: <code>{nickname}</code>\n"
                         f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤: {inf1}\n"
                         f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—É–∑–∏—á–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤: {posts}\n", parse_mode="html")

    await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ —ñ–º'—è –∞–∫–∞—É–Ω—Ç–∞ –≤–∞—à–æ–≥–æ –¥—Ä—É–≥–∞\n"
                         "–ß–∏ —Ç–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É –Ω–∞ —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å\n", reply_markup=back_keyboard)
    await States.subscribe.set()


@dp.message_handler(state=States.subscribe)
async def sub(message: types.Message, state: FSMContext):
    await state.finish()
    nickname = message.text
    inf = reader()
    nicknames = []
    for i in inf["users"]:
        nicknames.append(i["nickname"])
    nicks = " ".join(nicknames)
    if message.text == "üîô–ù–∞–∑–∞–¥üîô":
        await message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=user_ac_keyboard)
    else:
        if nickname in nicks:
            a = 0
            srt = ""
            for i in inf["users"]:
                if i["nickname"] == nickname:
                    a = i["user_id"]
                    srt = "".join(str(i["subscribers"]))
                    break

            if a != message.from_user.id and str(message.from_user.id) not in srt:
                subscribe(nickname, message.from_user.id)
                subscribed(nickname, message.from_user.id)
                await message.answer("–ü—ñ–¥–ø–∏—Å–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!", reply_markup=user_ac_keyboard)
            else:
                await message.answer("–í–∏–±–∞—á—Ç–µ —Ç–∞ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±–µ,\n"
                                     "a–±–æ –Ω–∞ –∞–≤—Ç–æ—Ä–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —è–∫–æ–≥–æ –±—É–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –≤–∞–º–∏ —Ä–∞–Ω—ñ—à–µ!\n"
                                     "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∞–≤—Ç–æ—Ä–∞ –Ω–∞ —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å\n", reply_markup=back_keyboard)
                await States.subscribe.set()
        else:
            await message.answer("–¢–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ —ñ—Å–Ω—É—î!", reply_markup=user_ac_keyboard)


@dp.message_handler(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å üéµ–º—É–∑–∏–∫–æ—éüéµ")
async def change_music(message: types.Message):
    await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –±—É–¥—å –ª–∞—Å–∫–∞ üéµ–ø—ñ—Å–Ω—éüéµ\n"
                         "–∞–±–æ –∂ –¥–µ–∫—ñ–ª—å–∫–∞, —è–∫–∏–º–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∑ –¥—Ä—É–∑—è–º–∏\n"
                         "üéµ–ú—É–∑–∏–∫—Éüéµ –º–æ–∂–Ω–∞ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –∑ üìù–¥–æ–ø–∏—Å–æ–ºüìù –ø—ñ–¥ –Ω–µ—é...", reply_markup=back_keyboard)


@dp.message_handler(text="üîô–ù–∞–∑–∞–¥üîô", state=None)
async def back(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=user_ac_keyboard)


@dp.message_handler(text="–ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è üë§–ø—Ä–æ—Ñ—ñ–ª—éüë§")
async def my_nickname(message: types.Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è –ø—Ä–æ—Ñ—ñ–ª—é!", reply_markup=back_keyboard)
    await States.change_name.set()


@dp.message_handler(state=States.change_name)
async def change_name(message: types.Message, state: FSMContext):
    await state.finish()
    new_nickname = message.text
    _id = message.from_user.id
    if new_nickname == "üîô–ù–∞–∑–∞–¥üîô":
        await message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=user_ac_keyboard)
    else:
        if message.text not in " /.,<>?@#$%^&*()!‚Ññ;:‚Ç¥~'" and len(message.text) < 24:
            if message.text + "\n" in read_file():
                await message.answer("–í–∏–±–∞—á—Ç–µ —Ç–∞ —Ü–µ —ñ–º'—è –ø—Ä–æ—Ñ—ñ–ª—é –≤–∂–µ –∑–∞–π–Ω—è—Ç–æ!üòî\n"
                                     "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–µ —ñ–º'—è –ø—Ä–æ—Ñ—ñ–ª—é!", reply_markup=back_keyboard)
                await States.change_name.set()
            else:
                text = read_file()
                text = text.replace(get_info_about_user(_id)["nickname"] + "\n", new_nickname + "\n")
                rewrite_file(text)
                change_nickname(_id, new_nickname)
                await message.answer("–í—ñ—Ç–∞—î–º–æ!üéâ‚ú®\n"
                                     "–Ü–º'—è üë§–ø—Ä–æ—Ñ—ñ–ª—éüë§ –∑–º—ñ–Ω–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!\n"
                                     "–ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—å –Ω–∞ –¥—Ä—É–∑—ñ–≤,\n"
                                     "–¥—ñ–ª—ñ—Ç—å—Å—è üéµ–º—É–∑–∏–∫–æ—éüéµ —è–∫–∞ —Ü—ñ–∫–∞–≤–∞ —Å–∞–º–µ –≤–∞–º,\n"
                                     "—Ç–∞ –≥–æ–ª–æ–≤–Ω–µ - –∫–∞–π—Ñ—É–π—Ç–µ!\n", reply_markup=user_ac_keyboard)
        else:
            await message.answer("–í–∏–±–∞—á—Ç–µ —Ç–∞ –≤–∞—à –Ω—ñ–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —Ü–∏–º —Å–∏–º–≤–æ–ª–æ–ºüòî\n"
                                 "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–µ —ñ–º'—è –ø—Ä–æ—Ñ—ñ–ª—é!", reply_markup=back_keyboard)
            await States.change_name.set()


@dp.message_handler(text="–ú–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏")
async def my_subscribed(message: types.Message):
    _id = message.from_user.id
    subscrib = get_info_about_user(_id)["subscribed"]
    if len(subscrib) == 0:
        await message.answer("–í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –∂–æ–¥–Ω–æ–≥–æ üë§–∞–≤—Ç–æ—Ä–∞üó£!", reply_markup=user_settings_keyboard)
    else:
        await message.answer("–í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ç–∞–∫–∏—Ö üë§–∞–≤—Ç–æ—Ä—ñ–≤üó£ : \n", reply_markup=unsub_keyboard)
        for i in subscrib:
            name = get_info_about_user(i)["nickname"]
            await message.answer(f"<code>{name}</code>\n")


@dp.message_handler(text="–°–∫–∞—Å—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –∞–≤—Ç–æ—Ä–∞")
async def un_subscribe(message: types.Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω—ñ–∫–Ω–µ–π–º üë§–∞–≤—Ç–æ—Ä–∞üë§ –≤—ñ–¥ —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å")
    await States.unsubscribe.set()


@dp.message_handler(state=States.unsubscribe)
async def unsubscribed(message: types.Message, state: FSMContext):
    await state.finish()
    _id = message.from_user.id
    text = read_file()
    if message.text == "üîô–ù–∞–∑–∞–¥üîô":
        await message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –º–µ–Ω—é –≤–∞—à–æ–≥–æ üë§–∞–∫–∞—É–Ω—Ç—Éüë§", reply_markup=user_settings_keyboard)
    else:
        if message.text + "\n" in text:
            unsub_id = get_info_about_user_by_name(message.text)["user_id"]
            unsubscribe(_id, unsub_id)
            await message.answer(f"–í—ñ—Ç–∞—î–º–æ –≤–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –≤—ñ–¥ <code>{message.text}</code>",
                                 reply_markup=user_settings_keyboard)
        else:
            await message.answer("–í–∏–±–∞—á—Ç–µ —Ç–∞ —Ç–∞–∫–æ–≥–æ üë§–∞–≤—Ç–æ—Ä–∞üó£ –Ω–µ —ñ—Å–Ω—É—î!\n"
                                 "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω—ñ–∫–Ω–µ–π–º üë§–∞–≤—Ç–æ—Ä–∞üó£!", reply_markup=unsub_keyboard)


@dp.message_handler(text="–î–æ–ø–æ–º–æ–≥–∞ –ó–°–£")
async def help_for_zsu(message: types.Message):
    await message.answer("–ó –æ–≥–ª—è–¥—É –Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—é –≤ –∫—Ä–∞—ó–Ω—ñ\n"
                         "–º–∏ –≤–∏—Ä—ñ—à–∏–ª–∏ –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ –≤—ñ–∫–æ–Ω—Ü–µ –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤.\n"
                         "–í—Å—ñ –∫–æ—à—Ç–∏ —â–æ –Ω–∞–¥—ñ–π–¥—É—Ç—å –Ω–∞ –∫–∞—Ä—Ç—É —É —Ü—å–æ–º—É –≤—ñ–∫–Ω—ñ\n"
                         "–±—É–¥—É—Ç—å –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É –ó–°–£.\n"
                         "–ß–µ–∫–∏ –±—É–¥–µ–º–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ —Ä–∞–∑ —É —Ç–∏–∂–¥–µ–Ω—å!\n")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
